(set 't 't)
(set 'nil ())
(set 'null (lambda (x) (eq x ())))
(set 'caar (lambda (x) (car (car x))))
(set 'cadr (lambda (x) (car (cdr x))))
(set 'cdar (lambda (x) (cdr (car x))))
(set 'cddr (lambda (x) (cdr (cdr x))))
(set 'caaar (lambda (x) (car (car (car x)))))
(set 'caadr (lambda (x) (car (car (cdr x)))))
(set 'cadar (lambda (x) (car (cdr (car x)))))
(set 'caddr (lambda (x) (car (cdr (cdr x)))))
(set 'cdaar (lambda (x) (cdr (car (car x)))))
(set 'cdadr (lambda (x) (cdr (car (cdr x)))))
(set 'cddar (lambda (x) (cdr (cdr (car x)))))
(set 'cdddr (lambda (x) (cdr (cdr (cdr x)))))
(set 'caaaar (lambda (x) (car (car (car (car x))))))
(set 'caaadr (lambda (x) (car (car (car (cdr x))))))
(set 'caadar (lambda (x) (car (car (cdr (car x))))))
(set 'caaddr (lambda (x) (car (car (cdr (cdr x))))))
(set 'cadaar (lambda (x) (car (cdr (car (car x))))))
(set 'cadadr (lambda (x) (car (cdr (car (cdr x))))))
(set 'caddar (lambda (x) (car (cdr (cdr (car x))))))
(set 'cadddr (lambda (x) (car (cdr (cdr (cdr x))))))
(set 'cdaaar (lambda (x) (cdr (car (car (car x))))))
(set 'cdaadr (lambda (x) (cdr (car (car (cdr x))))))
(set 'cdadar (lambda (x) (cdr (car (cdr (car x))))))
(set 'cdaddr (lambda (x) (cdr (car (cdr (cdr x))))))
(set 'cddaar (lambda (x) (cdr (cdr (car (car x))))))
(set 'cddadr (lambda (x) (cdr (cdr (car (cdr x))))))
(set 'cdddar (lambda (x) (cdr (cdr (cdr (car x))))))
(set 'cddddr (lambda (x) (cdr (cdr (cdr (cdr x))))))

(set 'not (lambda (x) (null x)))

(set 'equal (lambda (x y)
	      (cond ((eq x y) t)
		    ((or (null x) (null y)) nil)
		    ((or (atom x) (atom y)) nil)
		    (t (and (equal (car x) (car y))
			    (equal (cdr x) (cdr y)))))))

		    
(set 'append (lambda (x y)
	       (cond ((null x) y)
		     (t (cons (car x) (append (cdr x) y))))))

(set 'copy (lambda (x)
	     (cond ((null x) nil)
		   ((atom x) x)
		   (t (cons (car x) (copy (cdr x)))))))

